' modGuideMarkdown.bas
' Description: Génère un fichier Markdown pour le guide d'intégration
Option Explicit

Public Sub ExportGuideMarkdown()
    Dim filePath As String
    filePath = ThisWorkbook.Path & "\docs\APEX_EXCEL_INTEROP_GUIDE.md"
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    On Error Resume Next
    ' Créer le dossier docs s'il n'existe pas
    If Dir(ThisWorkbook.Path & "\docs", vbDirectory) = "" Then
        MkDir ThisWorkbook.Path & "\docs"
    End If
    On Error GoTo 0
    
    Open filePath For Output As #fileNum
    
    Print #fileNum, "# Guide d'intégration: Architecture d'interopérabilité Apex-Excel"
    Print #fileNum, ""
    Print #fileNum, "## Introduction"
    Print #fileNum, ""
    Print #fileNum, "Ce guide explique comment intégrer et utiliser l'architecture d'interopérabilité Apex-Excel dans vos projets VBA existants. Cette architecture permet un découplage complet entre la logique métier et les accès à Excel, tout en assurant une testabilité maximale via des mocks."
    Print #fileNum, ""
    Print #fileNum, "## Table des matières"
    Print #fileNum, ""
    Print #fileNum, "1. [Prérequis](#prérequis)"
    Print #fileNum, "2. [Import des fichiers](#import-des-fichiers)"
    Print #fileNum, "3. [Configuration du contexte](#configuration-du-contexte)"
    Print #fileNum, "4. [Utilisation dans un module métier](#utilisation-dans-un-module-métier)"
    Print #fileNum, "5. [Tests unitaires](#tests-unitaires)"
    Print #fileNum, "6. [Astuces et bonnes pratiques](#astuces-et-bonnes-pratiques)"
    Print #fileNum, "7. [Exemples d'intégration avancée](#exemples-dintégration-avancée)"
    Print #fileNum, ""
    Print #fileNum, "## Prérequis"
    Print #fileNum, ""
    Print #fileNum, "- Excel 2010 ou supérieur"
    Print #fileNum, "- VBA avec accès à la bibliothèque Microsoft Scripting Runtime (pour Dictionary)"
    Print #fileNum, ""
    Print #fileNum, "## Import des fichiers"
    Print #fileNum, ""
    Print #fileNum, "Importez les fichiers suivants dans votre projet VBA:"
    Print #fileNum, ""
    Print #fileNum, "### Interfaces"
    Print #fileNum, ""
    Print #fileNum, "- `ILoggerBase.cls` - Interface pour les loggers"
    Print #fileNum, "- `IWorkbookAccessor.cls` - Interface pour accéder aux classeurs"
    Print #fileNum, "- `ISheetAccessor.cls` - Interface pour accéder aux feuilles"
    Print #fileNum, "- `ICellAccessor.cls` - Interface pour accéder aux cellules"
    Print #fileNum, "- `IAppContext.cls` - Interface pour le contexte d'application"
    Print #fileNum, ""
    Print #fileNum, "### Implémentations de logging"
    Print #fileNum, ""
    Print #fileNum, "- `clsDebugLogger.cls` - Logger vers Debug.Print"
    Print #fileNum, "- `clsSheetLogger.cls` - Logger vers une feuille Excel"
    Print #fileNum, "- `clsFileLogger.cls` - Logger vers un fichier texte"
    Print #fileNum, "- `clsTestLogger.cls` - Logger pour les tests"
    Print #fileNum, "- `clsCompositeLogger.cls` - Logger combinant plusieurs loggers"
    Print #fileNum, "- `modLogFactory.bas` - Factory pour créer des loggers"
    Print #fileNum, ""
    Print #fileNum, "### Implémentations d'accès Excel"
    Print #fileNum, ""
    Print #fileNum, "- `clsExcelWorkbookAccessor.cls` - Accès aux classeurs Excel"
    Print #fileNum, "- `clsExcelSheetAccessor.cls` - Accès aux feuilles Excel"
    Print #fileNum, "- `clsExcelCellAccessor.cls` - Accès aux cellules Excel"
    Print #fileNum, ""
    Print #fileNum, "### Implémentations pour tests"
    Print #fileNum, ""
    Print #fileNum, "- `clsMockWorkbookAccessor.cls` - Mock de workbook pour tests"
    Print #fileNum, "- `clsMockSheetAccessor.cls` - Mock de worksheet pour tests"
    Print #fileNum, "- `clsMockCellAccessor.cls` - Mock de cellule pour tests"
    Print #fileNum, ""
    Print #fileNum, "### Contexte d'application"
    Print #fileNum, ""
    Print #fileNum, "- `clsAppContext.cls` - Contexte global de l'application"
    Print #fileNum, ""
    Print #fileNum, "## Configuration du contexte"
    Print #fileNum, ""
    Print #fileNum, "```vb"
    Print #fileNum, "' Créer et initialiser le contexte"
    Print #fileNum, "Dim ctx As New clsAppContext"
    Print #fileNum, "ctx.Init LOGGER_DEV ' Ou LOGGER_TEST, LOGGER_PROD selon l'environnement"
    Print #fileNum, ""
    Print #fileNum, "' Pour accéder au logger"
    Print #fileNum, "ctx.Logger.Info ""Initialisation du contexte terminée"""
    Print #fileNum, ""
    Print #fileNum, "' Pour accéder à la configuration"
    Print #fileNum, "Dim defaultSheet As String"
    Print #fileNum, "defaultSheet = ctx.Config(""DefaultSheet"")"
    Print #fileNum, "```"
    Print #fileNum, ""
    Print #fileNum, "## Utilisation dans un module métier"
    Print #fileNum, ""
    Print #fileNum, "```vb"
    Print #fileNum, "Private ctx As IAppContext"
    Print #fileNum, ""
    Print #fileNum, "Public Sub ExecuterTraitement(ByVal injectedCtx As IAppContext)"
    Print #fileNum, "    Set ctx = injectedCtx"
    Print #fileNum, "    On Error GoTo GestionErreur"
    Print #fileNum, "    "
    Print #fileNum, "    ctx.Logger.Info ""Début du traitement"""
    Print #fileNum, "    "
    Print #fileNum, "    ' Accès aux données Excel via abstraction"
    Print #fileNum, "    Dim workbook As IWorkbookAccessor"
    Print #fileNum, "    Set workbook = ctx.GetWorkbookAccessor(ThisWorkbook)"
    Print #fileNum, "    "
    Print #fileNum, "    Dim sheet As ISheetAccessor"
    Print #fileNum, "    Set sheet = workbook.GetSheet(""MaFeuille"")"
    Print #fileNum, "    "
    Print #fileNum, "    ' Lecture de données"
    Print #fileNum, "    Dim data As Variant"
    Print #fileNum, "    data = sheet.ReadRange(2, 1, 10, 5)"
    Print #fileNum, "    "
    Print #fileNum, "    ' Traitement des données..."
    Print #fileNum, "    "
    Print #fileNum, "    ' Écriture des résultats"
    Print #fileNum, "    sheet.GetCell(1, 1).Value = ""Résultat"""
    Print #fileNum, "    "
    Print #fileNum, "    ctx.Logger.Info ""Fin du traitement"""
    Print #fileNum, "    Exit Sub"
    Print #fileNum, "    "
    Print #fileNum, "GestionErreur:"
    Print #fileNum, "    ctx.ReportException ""ExecuterTraitement"""
    Print #fileNum, "End Sub"
    Print #fileNum, "```"
    Print #fileNum, ""
    Print #fileNum, "## Tests unitaires"
    Print #fileNum, ""
    Print #fileNum, "```vb"
    Print #fileNum, "' Créer un logger de test"
    Print #fileNum, "Dim testLogger As New clsTestLogger"
    Print #fileNum, ""
    Print #fileNum, "' Créer un contexte de test"
    Print #fileNum, "Dim ctx As New clsAppContext"
    Print #fileNum, "SetLogger testLogger"
    Print #fileNum, ""
    Print #fileNum, "' Créer un mock workbook pour les tests"
    Print #fileNum, "Dim mockWb As New clsMockWorkbookAccessor"
    Print #fileNum, "mockWb.AddMockSheet ""TestSheet"""
    Print #fileNum, ""
    Print #fileNum, "Dim sheet As ISheetAccessor"
    Print #fileNum, "Set sheet = mockWb.GetSheet(""TestSheet"")"
    Print #fileNum, ""
    Print #fileNum, "' Préparer des données de test"
    Print #fileNum, "sheet.GetCell(1, 1).Value = ""Test"""
    Print #fileNum, ""
    Print #fileNum, "' Exécuter le traitement à tester"
    Print #fileNum, "' ModuleA.ExecuterTraitement ctx"
    Print #fileNum, ""
    Print #fileNum, "' Vérifier les résultats"
    Print #fileNum, "If testLogger.Contains(""Erreur"") Then"
    Print #fileNum, "    Debug.Print ""Le test a échoué"""
    Print #fileNum, "Else"
    Print #fileNum, "    Debug.Print ""Le test a réussi"""
    Print #fileNum, "End If"
    Print #fileNum, "```"
    Print #fileNum, ""
    Print #fileNum, "## Astuces et bonnes pratiques"
    Print #fileNum, ""
    Print #fileNum, "1. **Injection de dépendances**"
    Print #fileNum, "   Toujours injecter le contexte dans vos modules plutôt que de le créer directement."
    Print #fileNum, ""
    Print #fileNum, "2. **Gestion des erreurs**"
    Print #fileNum, "   Utilisez systématiquement le pattern avec On Error et ctx.ReportException."
    Print #fileNum, ""
    Print #fileNum, "3. **Pattern d'architecture**"
    Print #fileNum, "   Structurez vos modules selon le pattern présenté dans modTraitementStandard.bas."
    Print #fileNum, ""
    Print #fileNum, "4. **Nommage**"
    Print #fileNum, "   Suivez les conventions de nommage: cls pour les classes, I pour les interfaces, mod pour les modules."
    Print #fileNum, ""
    Print #fileNum, "5. **Tests**"
    Print #fileNum, "   Écrivez des tests unitaires pour chaque module en utilisant les mocks fournis."
    Print #fileNum, ""
    Print #fileNum, "## Exemples d'intégration avancée"
    Print #fileNum, ""
    Print #fileNum, "### Intégration avec une application existante"
    Print #fileNum, ""
    Print #fileNum, "```vb"
    Print #fileNum, "' 1. Créer ou récupérer une instance du contexte"
    Print #fileNum, "Dim ctx As IAppContext"
    Print #fileNum, "Set ctx = New clsAppContext"
    Print #fileNum, ""
    Print #fileNum, "' 2. Configurer un logger adapté à l'environnement actuel"
    Print #fileNum, "Dim env As LoggerEnvironment"
    Print #fileNum, ""
    Print #fileNum, "' Déterminer l'environnement (exemple)"
    Print #fileNum, "If InStr(ThisWorkbook.Name, ""DEV"") > 0 Then"
    Print #fileNum, "    env = LOGGER_DEV"
    Print #fileNum, "ElseIf InStr(ThisWorkbook.Name, ""TEST"") > 0 Then"
    Print #fileNum, "    env = LOGGER_TEST"
    Print #fileNum, "Else"
    Print #fileNum, "    env = LOGGER_PROD"
    Print #fileNum, "End If"
    Print #fileNum, ""
    Print #fileNum, "ctx.Init env"
    Print #fileNum, ""
    Print #fileNum, "' 3. Exécuter les traitements en injectant le contexte"
    Print #fileNum, "' ModuleA.ExecuterTraitement ctx"
    Print #fileNum, "' ModuleB.ExecuterTraitement ctx"
    Print #fileNum, "```"
    Print #fileNum, ""
    Print #fileNum, "### Extension de l'architecture"
    Print #fileNum, ""
    Print #fileNum, "Vous pouvez étendre l'architecture en créant vos propres implémentations des interfaces existantes. Par exemple, pour créer un nouveau type de logger qui envoie des emails:"
    Print #fileNum, ""
    Print #fileNum, "```vb"
    Print #fileNum, "' Class clsEmailLogger"
    Print #fileNum, "'     Implements ILoggerBase"
    Print #fileNum, "'     "
    Print #fileNum, "'     Private Sub ILoggerBase_Log(ByVal level As String, ByVal message As String)"
    Print #fileNum, "'         If level = ""ERROR"" Then"
    Print #fileNum, "'             ' Envoyer un email avec la librairie d'email de votre choix"
    Print #fileNum, "'             SendEmail ""admin@example.com"", ""Erreur application"", message"
    Print #fileNum, "'         End If"
    Print #fileNum, "'     End Sub"
    Print #fileNum, "'     "
    Print #fileNum, "'     ' Autres méthodes ILoggerBase..."
    Print #fileNum, "' End Class"
    Print #fileNum, "```"
    
    Close #fileNum
    
    MsgBox "Guide d'intégration exporté avec succès: " & filePath, vbInformation, "Export terminé"
End Sub 