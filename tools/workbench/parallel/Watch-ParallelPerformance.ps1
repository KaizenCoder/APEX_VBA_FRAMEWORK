# =============================================================================
# üß≠ Session de travail ‚Äì 2024-04-14
# =============================================================================

<#
.SYNOPSIS
    Monitore les performances des processus parall√®les (VSCode, Cursor, Excel)

.DESCRIPTION
    Surveille en continu les m√©triques de performance des processus VSCode, Cursor et Excel,
    incluant l'utilisation CPU, m√©moire et les m√©triques sp√©cifiques VBA.
    G√©n√®re des alertes si les seuils sont d√©pass√©s et sauvegarde les rapports.

.NOTES
    Version     : 1.2
    Author      : APEX Framework
    Created     : 2024-04-14
    Updated     : 2024-04-14
#>

#Requires -Version 5.1
#Requires -RunAsAdministrator

[CmdletBinding()]
param (
    [int]$IntervalSeconds = 30,
    [int]$CpuThreshold = 80,
    [int]$MemoryThreshold = 2048,
    [string]$MonitoringPath = (Join-Path $PSScriptRoot "../../../monitoring")
)

# ==============================================================================
# üéØ Objectif(s)
# ==============================================================================
# - Monitorer les performances des processus parall√®les
# - G√©n√©rer des alertes en cas de d√©passement de seuils
# - Sauvegarder les m√©triques pour analyse

# ==============================================================================
# üìå Suivi des t√¢ches
# ==============================================================================
<#
| T√¢che | Module | Statut | Commentaire |
|-------|--------|--------|-------------|
| Monitoring CPU/RAM | Performance | ‚úÖ | Impl√©ment√© |
| M√©triques VBA | Excel | ‚úÖ | Ajout√© |
| Alertes | Monitoring | ‚úÖ | Configur√© |
#>

# ==============================================================================
# üîÑ Initialisation
# ==============================================================================
$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

# V√©rification et cr√©ation du dossier de monitoring
try {
    if (-not (Test-Path $MonitoringPath)) {
        Write-Verbose "üìÅ Cr√©ation du dossier de monitoring : $MonitoringPath"
        New-Item -ItemType Directory -Path $MonitoringPath -Force -ErrorAction Stop | Out-Null
        Write-Verbose "‚úÖ Dossier de monitoring cr√©√© avec succ√®s"
    }
    
    # Test des permissions d'√©criture
    $testFile = Join-Path $MonitoringPath "test.tmp"
    try {
        [System.IO.File]::WriteAllText($testFile, "Test")
        Remove-Item $testFile -Force
        Write-Verbose "‚úÖ Permissions d'√©criture v√©rifi√©es"
    }
    catch {
        throw "‚ùå Permissions insuffisantes sur le dossier de monitoring : $_"
    }
}
catch {
    Write-Error "‚ùå Erreur lors de l'initialisation du dossier de monitoring : $_"
    exit 1
}

$alertLogPath = Join-Path $MonitoringPath "performance_alerts.log"

# ==============================================================================
# üìã Fonctions
# ==============================================================================

function Get-VbaMetric {
    param (
        [string]$MetricName
    )
    
    try {
        # R√©cup√©ration des m√©triques depuis le fichier de monitoring VBA
        $vbaMetricsPath = Join-Path $MonitoringPath "vba_metrics.json"
        if (Test-Path $vbaMetricsPath) {
            $vbaMetrics = Get-Content $vbaMetricsPath | ConvertFrom-Json
            return $vbaMetrics.$MetricName
        }
        return 0
    }
    catch {
        Write-Warning "Impossible de r√©cup√©rer la m√©trique VBA $MetricName : $_"
        return 0
    }
}

function Get-ProcessMetrics {
    param (
        [string]$ProcessName
    )
    
    try {
        $process = Get-Process -Name $ProcessName -ErrorAction SilentlyContinue
        if (-not $process) {
            return @{
                IsRunning    = $false
                CpuPercent   = 0
                MemoryMB     = 0
                ThreadCount  = 0
                HandleCount  = 0
                ProcessCount = 0
            }
        }

        # Calcul CPU %
        $cpuPercent = [math]::Round(($process | Measure-Object -Property CPU -Sum).Sum, 2)
        
        # M√©triques de base
        $metrics = @{
            IsRunning    = $true
            CpuPercent   = $cpuPercent
            MemoryMB     = [math]::Round($process.WorkingSet64 / 1MB, 2)
            ThreadCount  = ($process | Measure-Object -Property Threads -Sum).Sum
            HandleCount  = ($process | Measure-Object -Property Handles -Sum).Sum
            ProcessCount = ($process | Measure-Object).Count
        }

        # M√©triques sp√©cifiques Excel/VBA si applicable
        if ($ProcessName -eq "EXCEL") {
            $metrics += @{
                VbaCallTime    = Get-VbaMetric -MetricName "CallTime"
                VbaMemoryUsage = Get-VbaMetric -MetricName "MemoryUsage"
                VbaLastCall    = Get-VbaMetric -MetricName "LastCall"
                VbaErrorCount  = Get-VbaMetric -MetricName "ErrorCount"
            }
        }

        return $metrics
    }
    catch {
        Write-Error "Erreur lors de la collecte des m√©triques pour $ProcessName : $_"
        return $null
    }
}

# ==============================================================================
# üöÄ Ex√©cution principale
# ==============================================================================
try {
    Write-Verbose "üîÑ D√©marrage du monitoring des performances..."
    
    while ($true) {
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $report = @{
            Timestamp = $timestamp
            VSCode    = Get-ProcessMetrics -ProcessName "Code"
            Cursor    = Get-ProcessMetrics -ProcessName "Cursor"
            Excel     = Get-ProcessMetrics -ProcessName "EXCEL"
        }

        # V√©rification des seuils et alertes
        foreach ($app in @("VSCode", "Cursor", "Excel")) {
            $metrics = $report[$app]
            if ($metrics.IsRunning) {
                if ($metrics.CpuPercent -gt $CpuThreshold) {
                    $alert = "[$timestamp] ‚ö†Ô∏è $app : CPU √©lev√© ($($metrics.CpuPercent)%)"
                    Add-Content -Path $alertLogPath -Value $alert
                }
                if ($metrics.MemoryMB -gt $MemoryThreshold) {
                    $alert = "[$timestamp] ‚ö†Ô∏è $app : M√©moire √©lev√©e ($($metrics.MemoryMB) MB)"
                    Add-Content -Path $alertLogPath -Value $alert
                }
            }
        }

        # Sauvegarde du rapport
        $reportPath = Join-Path $MonitoringPath "performance_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"
        $report | ConvertTo-Json -Depth 10 | Out-File $reportPath

        Start-Sleep -Seconds $IntervalSeconds
    }
}
catch {
    Write-Error "‚ùå Erreur dans le monitoring : $_"
    exit 1
}

# ==============================================================================
# ‚úÖ Cl√¥ture de session
# ==============================================================================
Write-Verbose "‚ú® Script termin√© avec succ√®s"
exit 0 