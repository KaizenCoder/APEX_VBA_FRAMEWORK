#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour renommer tous les fichiers journaux obsol√®tes en ajoutant l'extension .DEPRECATED
Compatible avec WSL et optimis√© pour les performances sur le syst√®me de fichiers Windows.

IMPORTANT: Ce script doit √™tre ex√©cut√© via PowerShell sous Windows, PAS via WSL.
Commande recommand√©e :
    python D:\chemin\vers\Apex_VBA_FRAMEWORK\tools\python\rename_deprecated_logs.py [--dry-run]
"""
import os
import argparse
import logging
import time
import platform
import sys
from datetime import datetime

# --- V√©rification d'environnement ---
def check_environment():
    """V√©rifie si le script est ex√©cut√© dans l'environnement appropri√©"""
    # D√©tection de WSL
    if "microsoft" in platform.release().lower() or "linux" in platform.system().lower():
        print("üö® ERREUR D'ENVIRONNEMENT")
        print("Ce script ne doit pas √™tre lanc√© depuis WSL. Utilisez PowerShell Windows natif.")
        print("\nCommande √† utiliser sous PowerShell:")
        print('   python D:\\chemin\\vers\\Apex_VBA_FRAMEWORK\\tools\\python\\rename_deprecated_logs.py --dry-run -v')
        print("\nOu utilisez le script .bat fourni:")
        print('   D:\\chemin\\vers\\Apex_VBA_FRAMEWORK\\tools\\run_rename_logs.bat')
        sys.exit(1)
        
    # V√©rification de l'acc√®s aux chemins Windows
    try:
        windows_path = os.environ.get('USERPROFILE')
        if windows_path and os.path.exists(windows_path):
            return True
        else:
            print("‚ö†Ô∏è Attention: Impossible de v√©rifier les chemins Windows standard.")
            print("Assurez-vous d'ex√©cuter le script depuis Windows PowerShell.")
    except Exception:
        print("‚ö†Ô∏è Erreur lors de la v√©rification de l'environnement Windows.")
    
    return True  # On continue malgr√© tout

# --- Configuration du logger ---
def setup_logger(log_file="rename_logs.log"):
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_file, mode='w', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

# --- Fonction principale ---
def rename_files(root_dir=".", dry_run=False):
    """Renomme tous les fichiers journaux obsol√®tes en ajoutant .DEPRECATED"""
    start_time = time.time()
    patterns = [
        "create_addin_log",  # pr√©fixe
        "fix_classes_log.txt",
        "apex_addin_generator.log"
    ]
    
    # Compteurs pour statistiques
    count_renamed = 0
    count_errors = 0
    count_scanned_dirs = 0
    count_scanned_files = 0
    found_files = []
    
    # Journal de d√©marrage
    logging.info(f"=== D√âMARRAGE DU PROCESSUS DE RENOMMAGE ===")
    logging.info(f"R√©pertoire racine: {os.path.abspath(root_dir)}")
    logging.info(f"Mode simulation: {dry_run}")
    logging.info(f"Motifs recherch√©s: {patterns}")
    logging.info(f"-------------------------------------------")

    # Analyse des fichiers
    for dirpath, dirnames, files in os.walk(root_dir):
        count_scanned_dirs += 1
        if count_scanned_dirs % 100 == 0:  # Log tous les 100 r√©pertoires
            logging.info(f"[PROGRESSION] {count_scanned_dirs} r√©pertoires analys√©s, {count_scanned_files} fichiers scann√©s")
        
        # Log pour chaque r√©pertoire si niveau verbeux
        logging.debug(f"Analyse du r√©pertoire: {dirpath} ({len(files)} fichiers)")
        
        for fname in files:
            count_scanned_files += 1
            
            # V√©rification des mod√®les
            matches_pattern = False
            if fname.startswith("create_addin_log") and fname.endswith(".txt") and not fname.endswith(".DEPRECATED"):
                matches_pattern = True
                pattern_matched = "create_addin_log*.txt"
            elif fname in patterns[1:] and not fname.endswith(".DEPRECATED"):
                matches_pattern = True
                pattern_matched = fname
            
            if matches_pattern:
                src = os.path.join(dirpath, fname)
                dst = src + ".DEPRECATED"
                found_files.append((src, pattern_matched))
                
                if os.path.exists(dst):
                    logging.warning(f"‚ö†Ô∏è Le fichier {dst} existe d√©j√†, il sera √©cras√©.")

                if dry_run:
                    logging.info(f"[SIMULATION] üîÑ Renommage: {src} -> {dst}")
                    count_renamed += 1
                else:
                    try:
                        os.rename(src, dst)
                        logging.info(f"‚úÖ Renomm√©: {src} -> {dst}")
                        count_renamed += 1
                    except Exception as e:
                        logging.error(f"‚ùå √âchec du renommage de {src}: {str(e)}")
                        count_errors += 1
    
    # Calcul dur√©e d'ex√©cution
    duration = time.time() - start_time
    
    # R√©sum√© d√©taill√©
    logging.info(f"\n=== R√âSUM√â DU PROCESSUS DE RENOMMAGE ===")
    logging.info(f"Dur√©e d'ex√©cution: {duration:.2f} secondes")
    logging.info(f"R√©pertoires analys√©s: {count_scanned_dirs}")
    logging.info(f"Fichiers scann√©s: {count_scanned_files}")
    logging.info(f"Fichiers renomm√©s: {count_renamed}")
    logging.info(f"Erreurs rencontr√©es: {count_errors}")
    
    # D√©tail des fichiers trouv√©s
    if found_files:
        logging.info(f"\n--- Liste des fichiers trait√©s ---")
        for src, pattern in found_files:
            logging.info(f"‚Ä¢ {src} (motif: {pattern})")
    else:
        logging.info(f"\nAucun fichier correspondant aux motifs n'a √©t√© trouv√©.")
    
    logging.info(f"===================================")
    
    return count_renamed, count_errors, count_scanned_dirs, count_scanned_files

# --- Entr√©e CLI ---
if __name__ == "__main__":
    # V√©rifier l'environnement d'ex√©cution
    check_environment()
    
    parser = argparse.ArgumentParser(description="Renomme les fichiers journaux obsol√®tes en ajoutant .DEPRECATED")
    parser.add_argument(
        "--dir", default=".", help="R√©pertoire racine pour d√©marrer l'analyse (d√©faut: .)"
    )
    parser.add_argument(
        "--dry-run", action="store_true", help="Simule le processus sans renommer"
    )
    parser.add_argument(
        "--log-file", default=f"rename_logs_{datetime.now().strftime('%Y%m%d%H%M')}.log", 
        help="Fichier journal (d√©faut: rename_logs_YYYYMMDDHHMM.log)"
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Active les logs verbeux (DEBUG)"
    )
    parser.add_argument(
        "--export-csv", help="G√©n√®re un rapport CSV des fichiers renomm√©s"
    )

    args = parser.parse_args()

    # Configuration du logger avec niveau verbeux si demand√©
    setup_logger(args.log_file)
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.info("Mode verbeux activ√©")
    
    try:
        logging.info(f"Script d√©marr√©: {os.path.basename(__file__)}")
        renamed, errors, dirs_scanned, files_scanned = rename_files(root_dir=args.dir, dry_run=args.dry_run)
        logging.info(f"Script termin√© avec succ√®s: {os.path.basename(__file__)}")
        
        # Export CSV si demand√©
        if args.export_csv and renamed > 0:
            try:
                import csv
                with open(args.export_csv, 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow(['Fichier', 'Statut', 'Motif'])
                    # Note: Les donn√©es compl√®tes pour le CSV devraient √™tre collect√©es dans rename_files
                    # Cette partie serait √† am√©liorer pour un export CSV complet
                    
                logging.info(f"Rapport CSV g√©n√©r√©: {args.export_csv}")
            except Exception as csv_error:
                logging.error(f"Erreur lors de la g√©n√©ration du rapport CSV: {str(csv_error)}")
    except Exception as e:
        logging.error(f"Exception non g√©r√©e: {str(e)}", exc_info=True)
        logging.critical("Le script s'est termin√© avec des erreurs")
        raise 