# =============================================================================
# Script de v√©rification pr√©-commit des r√®gles Cursor
# =============================================================================
#
# .SYNOPSIS
#   V√©rifie la conformit√© avec les r√®gles Cursor avant un commit.
#
# .DESCRIPTION
#   Ce script v√©rifie que les fichiers modifi√©s respectent les r√®gles Cursor :
#   - Validation de la documentation
#   - V√©rification des conventions de nommage
#   - Contr√¥le des d√©pendances
#   - Structure des fichiers
#
# =============================================================================

[CmdletBinding()]
param (
    [string]$RulesPath = ".cursor-rules",
    [switch]$Fix
)

function Get-ModifiedFiles {
    Write-Host "`nüìÑ Recherche des fichiers modifi√©s..." -ForegroundColor Cyan
    
    $files = git diff --cached --name-only --diff-filter=ACMR
    
    if (-not $files) {
        Write-Host "  Aucun fichier modifi√© trouv√©" -ForegroundColor Gray
        return @()
    }
    
    return $files
}

function Test-FileCompliance {
    param (
        [string]$FilePath,
        [string]$RulesPath
    )
    
    Write-Host "  Analyse de $FilePath..." -ForegroundColor Gray
    $issues = @()
    
    # D√©terminer le type de fichier
    $extension = [System.IO.Path]::GetExtension($FilePath)
    
    # Charger les r√®gles appropri√©es
    $generalRules = Get-Content (Join-Path $RulesPath "general.json") | ConvertFrom-Json
    $languageRules = Get-Content (Join-Path $RulesPath "language-specific.json") | ConvertFrom-Json
    $projectRules = Get-Content (Join-Path $RulesPath "project-specific.json") | ConvertFrom-Json
    
    # Appliquer les r√®gles g√©n√©rales
    foreach ($rule in $generalRules.rules) {
        if ($rule.enabled) {
            # V√©rification des r√®gles g√©n√©rales...
            # Exemple: En-t√™tes de documentation
            if ($rule.name -eq "documentation-headers") {
                $content = Get-Content $FilePath -Raw
                foreach ($pattern in $rule.patterns) {
                    if ($FilePath -like $pattern.fileType) {
                        foreach ($headerTag in $pattern.header) {
                            if (-not ($content -match [regex]::Escape($headerTag))) {
                                $issues += @{
                                    Rule     = $rule.name
                                    Message  = "Tag manquant: $headerTag"
                                    Severity = $rule.severity
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    # Appliquer les r√®gles sp√©cifiques au langage
    switch -Regex ($extension) {
        '\.cls|\.bas|\.frm' {
            foreach ($rule in $languageRules.rules.vb) {
                if ($rule.enabled) {
                    # V√©rification des r√®gles VBA...
                }
            }
        }
        '\.md' {
            foreach ($rule in $languageRules.rules.markdown) {
                if ($rule.enabled) {
                    # V√©rification des r√®gles Markdown...
                }
            }
        }
        '\.ps1' {
            foreach ($rule in $languageRules.rules.powershell) {
                if ($rule.enabled) {
                    # V√©rification des r√®gles PowerShell...
                }
            }
        }
    }
    
    # Appliquer les r√®gles sp√©cifiques au projet
    foreach ($rule in $projectRules.rules) {
        if ($rule.enabled) {
            # V√©rification des r√®gles projet...
            if ($rule.name -eq "apex-naming-conventions") {
                $filename = [System.IO.Path]::GetFileNameWithoutExtension($FilePath)
                foreach ($pattern in $rule.patterns.PSObject.Properties) {
                    if ($filename -notmatch $pattern.Value) {
                        $issues += @{
                            Rule     = $rule.name
                            Message  = "Le nom ne respecte pas la convention $($pattern.Name): $filename"
                            Severity = $rule.severity
                        }
                    }
                }
            }
        }
    }
    
    return $issues
}

# Ex√©cution principale
try {
    Write-Host "==================================================="
    Write-Host "     V√âRIFICATION PR√â-COMMIT CURSOR                "
    Write-Host "==================================================="
    
    # 1. Obtenir les fichiers modifi√©s
    $modifiedFiles = Get-ModifiedFiles
    if (-not $modifiedFiles) {
        Write-Host "`n‚ú® Aucun fichier √† v√©rifier" -ForegroundColor Green
        exit 0
    }
    
    # 2. V√©rifier chaque fichier
    $allIssues = @()
    foreach ($file in $modifiedFiles) {
        if (Test-Path $file) {
            $issues = Test-FileCompliance -FilePath $file -RulesPath $RulesPath
            if ($issues) {
                $allIssues += @{
                    File   = $file
                    Issues = $issues
                }
            }
        }
    }
    
    # 3. Afficher les r√©sultats
    if ($allIssues) {
        Write-Warning "`n‚ö†Ô∏è Probl√®mes d√©tect√©s:"
        foreach ($fileIssues in $allIssues) {
            Write-Host "`nüìù $($fileIssues.File):" -ForegroundColor Yellow
            foreach ($issue in $fileIssues.Issues) {
                $icon = switch ($issue.Severity) {
                    "error" { "‚ùå" }
                    "warning" { "‚ö†Ô∏è" }
                    default { "‚ÑπÔ∏è" }
                }
                Write-Host "  $icon $($issue.Rule): $($issue.Message)"
            }
        }
        
        # Si le mode correction est activ√©
        if ($Fix) {
            Write-Host "`nüîß Tentative de correction automatique..." -ForegroundColor Cyan
            # TODO: Impl√©menter la correction automatique
        }
        
        exit 1
    }
    
    Write-Host "`n‚ú® Tous les fichiers respectent les r√®gles Cursor" -ForegroundColor Green
    exit 0
}
catch {
    Write-Error "‚ùå Erreur lors de la v√©rification: $_"
    exit 2
}